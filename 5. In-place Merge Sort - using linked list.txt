/*//HW5 CSE674
//Due: Sunday (Nov. 5) at 11:59PM
//You need to implement the following three functions
//
//void merge_sort(node * p, int i);
//void merge(node * p1, int i1, node * p2, int i2);
//void merge_sort(vector<int> &V);
//Read the requirements stated below.


#include <iostream>
#include <list>
#include <vector>

using namespace std;

class node {
public:
int value;
node * next;
node() { next = nullptr; }
node(int i) { value = i; next = nullptr; }
};


class linked_list {
public:
int num_nodes;
node * head;
linked_list() { num_nodes = 0; head = nullptr; }
void make_list(int k, int m);
void print();
//****************************************************************************************************************************************
void merge_sort(node * p, int i); //Sort the portion (i nodes) of linked list beginning at the node pointed by p.
//You will implement the algorithm using a recursive approach.
//In-place merge sort is required; that is, you are not allowed to create a separate linked list, etc. to perform sorting.


//You need to also implement the following merge funciton, which
//merges two already sorted porttion of linked list beginning at nodes pointed by p1 and p2, with sizes being i1 nodes and i2 nodes, respectively.
//Assume that these two portions are adjacent.
//That is, the last node of the first portion is immediately followed by the first node of the second portion.


void merge(node * p1, int i1, node * p2, int i2);
//*******************************************************************************************************************************************

};

void linked_list::merge_sort(node * p, int i) {

node *head = p;
node *leftstart = p;
node *leftend = leftstart;
node *rightstart;
node *temp = p;
int leftsize = 0;
int rightsize = 0;
temp = head;

int mid = i / 2;

if (i == 1 || p == NULL || p->next == NULL)
{
leftsize = 1;
return;
}

if (i % 2 == 0)
{
leftsize = mid;

for (int i = 1; i <leftsize; i++)
{
leftend = leftend->next;
}

rightstart = leftend->next;
}

else
{
leftsize = mid + 1;

for (int i = 1; i < leftsize; i++)
{
leftend = leftend->next;
}

rightstart = leftend->next;
}

rightsize = i - leftsize;

merge_sort(leftstart, leftsize);
merge_sort(rightstart, rightsize);
merge(leftstart, leftsize, rightstart, rightsize);
}


void linked_list::merge(node * p1, int i1, node * p2, int i2)
{
node *leftstart = p1;
node *rightstart = p2;
int leftsize = 0;
int rightsize = 0;

while (rightsize < i2)
{

while (leftsize < i1)
{
if (leftstart->next == NULL)
{
return;
}

if (leftstart->value <= rightstart->value)
{
leftstart = leftstart->next;
leftsize++;
}
else
{
int temp;
temp = leftstart->value;
leftstart->value = rightstart->value;
rightstart->value = temp;
leftstart = leftstart->next;
leftsize++;
}

}

rightsize++;
leftsize = 0;
i1++;
leftstart = p1;
rightstart = rightstart->next;
}
}

void linked_list::make_list(int k, int m) {
for (int i = 0; i < k; i++) {
node * p = new node(rand() % m);
p->next = head;
head = p;
num_nodes++;
}
}


void linked_list::print() {
node * p = head;
cout << endl;
while (p != nullptr) {
cout << p->value << " ";
p = p->next;
}
}

void make_random_vector(vector<int> &V, int k, int m) {
for (int i = 0; i < k; i++) V.push_back(rand() % m);
}

//***********************************************************************************************************************

//Using iterative (i.e., non_recursive) approach to implement merge sort.
void merge_sort(vector<int> &V) {
int n = V.size();
int curr_size;
int left_start;
for (curr_size = 1; curr_size <= n - 1; curr_size = 2 * curr_size)
{
for (left_start = 0; left_start < n - 1; left_start += 2 * curr_size)
{

int mid1 = left_start + curr_size - 1;
int mid2 = n - 1;
int mid = (mid1 < mid2) ? mid1 : mid2;
int tmp_x = (left_start + 2 * curr_size - 1);
int tmp_y = n - 1;
int right_end = (tmp_x < tmp_y) ? tmp_x : tmp_y;
int i, j, k;
int n1 = mid - left_start + 1;
int n2 = right_end - mid;
vector<int> v1;
v1.resize(n1);
vector<int> v2;
v2.resize(n2);
vector<int> v3(n);
for (i = 0; i < n1; i++)
{
v1[i] = V[left_start + i];
}
for (j = 0; j < n2; j++)
{
v2[j] = V[mid + 1 + j];
}
i = 0;
j = 0;
k = left_start;

while (i < n1 && j < n2)
{

if (v1[i] <= v2[j])
{
V[k] = v1[i];
i++;

}
else
{
V[k] = v2[j];
j++;

}
k++;
}

while (i < n1)
{
V[k] = v1[i];
i++;
k++;
}

while (j < n2)
{
V[k] = v2[j];
j++;
k++;
}

}

}
}

//***********************************************************************************************************************



int main() {

vector<int> V;
make_random_vector(V, 450, 450);
cout << endl;
for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";
merge_sort(V);
cout << endl;
for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";

linked_list L1;
L1.make_list(350, 200);
L1.print();
L1.merge_sort(L1.head, L1.num_nodes);
L1.print();

getchar();
getchar();
return 0;
}
*/


#include <iostream>
#include <list>
#include <vector>

using namespace std;

class node
{
public:
	int value;
	node * next;
	node()
	{
		next = nullptr;
	}
	node(int i)
	{
		value = i;
		next = nullptr;
	}
};


class linked_list
{
public:
	int num_nodes;
	node * head;

	linked_list()
	{
		num_nodes = 0;
		head = nullptr;
	}
	void make_list(int k, int m);
	void print();
	//****************************************************************************************************************************************
	void merge_sort(node * p, int i);

	//Sort the portion (i nodes) of linked list beginning at the node pointed by p.
	//You will implement the algoeithm using a recursive approach.
	//In-place merge sort is required; that is, you are not allowed to create a separate linked list, etc. to perform sorting.


	//You need to also implement the following merge funciton, which
	//merges two already sorted porttion of linked list beginning at nodes pointed by p1 and p2, with sizes being i1 nodes and i2 nodes, respectively.
	//Assume that these two portions are adjacent.
	//That is, the last node of the first portion is immediately followed by the first node of the second portion.


	void merge(node * p1, int i1, node * p2, int i2);

	//*******************************************************************************************************************************************

};


void linked_list::make_list(int k, int m)
{
	for (int i = 0; i < k; i++)
	{
		node * p = new node(rand() % m);
		p->next = head;
		head = p;
		num_nodes++;
	}
}


void linked_list::print()
{
	node * p = head;
	cout << endl;
	while (p != nullptr) {
		cout << p->value << " ";
		p = p->next;
	}
}

void linked_list::merge_sort(node *p, int i) // int input = no. of nodes
{
	node *mainHead = p;
	int mainSize = i;

	node *resultList = p;
	node *leftListPtr = nullptr;
	node *rightListPtr = nullptr;

	// size of list is 1, ie. only one node is left
	if (mainSize == 1 || mainSize == 0)
	{
		// call merge
		return;
	}

	int mainMid = mainSize / 2;
	// left list size --> 0 to (mainMid - 1) ie. mainMid
	// right list size --> (mainMid to mainSize - 1) ie. (mainSize - mainMid)

	// initialize left and right lists
	node *leftList = mainHead;
	leftListPtr = mainHead;

	int leftSize = 0;
	int rightSize = 0;

	// separation of left and right lists
	if (i % 2 == 0) // size of list is even
	{
		leftSize = mainMid;
		rightSize = mainSize - mainMid;
	}
	else // size of list is odd
	{
		leftSize = mainMid + 1;
		rightSize = mainSize - leftSize;
	}

	node *rightList = p;

	for (int a = 0; a<leftSize; a++)
	{
		rightList = rightList->next;
	}

	merge_sort(leftList, leftSize); // left list

	merge_sort(rightList, rightSize); // right list

	merge(leftList, leftSize, rightList, rightSize);
}

void linked_list::merge(node * p1, int i1, node * p2, int i2)
{
	// initializing
	node *leftListPtr = p1;		// here it will denote the unpicked element in left list
	node *rightListPtr = p2;	// here it will denote the unpicked element in right list
	int tempValue = -1;

	int leftCount = 1;
	int rightCount = 0;
	int leftsize = i1;
	int rightsize = i2;

	while (rightCount<rightsize)
	{
		rightCount++;
		leftCount = 1;

		while (leftCount <= leftsize)
		{
			if (leftListPtr->next == nullptr)
			{
				return;
			}

			if (leftListPtr->value <= rightListPtr->value)
			{
				// don't swap; move to next while
				leftListPtr = leftListPtr->next;
				leftCount = leftCount + 1;
			}
			else if (rightListPtr->value <= leftListPtr->value)
			{
				// swap and move to next while iteration
				tempValue = leftListPtr->value;

				leftListPtr->value = rightListPtr->value;
				rightListPtr->value = tempValue;

				// shift left ptr to next pos
				leftListPtr = leftListPtr->next;
				leftCount = leftCount + 1;
			}
		}
		rightListPtr = rightListPtr->next;
		leftListPtr = p1;
		leftsize++;
	}
}

void make_random_vector(vector<int> &V, int k, int m)
{
	for (int i = 0; i < k; i++)
		V.push_back(rand() % m);
}

//***********************************************************************************************************************
void merge_sort(vector<int> &V); //Using iterative (i.e., non_recursive) approach to implement merge sort.
//***********************************************************************************************************************

int main()
{
	vector<int> V;
	make_random_vector(V, 50, 40);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";
	merge_sort(V);
	cout << endl;
	for (size_t i = 0; i < V.size(); i++) cout << V[i] << " ";

	linked_list L1;
	L1.make_list(30, 20);
	L1.print();
	L1.merge_sort(L1.head, L1.num_nodes);
	L1.print();

	getchar();
	getchar();
	return 0;
}

void merge_sort(vector<int>& V)
{
	int vecSize = V.size();
	int sizePtr;
	int leftPtr;

	for (sizePtr = 1; sizePtr <= vecSize - 1; sizePtr = 2 * sizePtr)
	{
		for (leftPtr = 0; leftPtr < vecSize - 1; leftPtr += 2 * sizePtr)
		{
			int mid1 = leftPtr + sizePtr - 1;
			int mid2 = vecSize - 1;
			int mid = (mid1 < mid2) ? mid1 : mid2;
			int rightPtr1 = leftPtr + 2 * sizePtr - 1;
			int rightPtr2 = vecSize - 1;
			int rightPtr = (rightPtr1 < rightPtr2) ? rightPtr1 : rightPtr2;

			int a, b, c;
			int vecSize1, vecSize2;
			vecSize1 = mid - leftPtr + 1;
			vecSize2 = rightPtr - mid;

			vector<int> lvec;
			lvec.resize(vecSize1);
			vector<int> rvec;
			rvec.resize(vecSize2);
			for (int a = 0; a < vecSize1; a++)
			{
				lvec[a] = V[leftPtr + a];
			}
			for (int b = 0; b < vecSize2; b++)
			{
				rvec[b] = V[mid + 1 + b];
			}

			a = 0;
			b = 0;
			c = leftPtr;
			while (a < vecSize1 && b < vecSize2)
			{
				if (lvec[a] <= rvec[b])
				{
					V[c] = lvec[a];
					a++;
				}
				else
				{
					V[c] = rvec[b];
					b++;
				}
				c++;
			}

			while (a < vecSize1)
			{
				V[c] = lvec[a];
				a++;
				c++;
			}

			while (b < vecSize2)
			{
				V[c] = rvec[b];
				b++;
				c++;
			}
		}
	}
}